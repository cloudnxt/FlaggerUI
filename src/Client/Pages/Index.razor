@page "/"
@using Gates.Client.Shared;
@using Gates.Shared
@using Gates.Shared.Data;
@using Gates.Shared.Enums;
@inject NavigationManager _navigationManager
@inject HttpClient Http

<style>
    .mud-chart-bar {
        stroke-width: 10px;
    }
</style>

<PageTitle>Index</PageTitle>

<MudPaper Width="500" Elevation="10">
    <h3>Counts</h3>

    Bar Graph to show count for each state of Rollout, Traffic, Promotion..
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Indx" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="chartOptions">
                </MudChart>
            </MudPaper>
        </MudItem>
        
    </MudGrid>
    <h3>All Gates</h3>

    Each state being a  different color
    <MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudChart ChartType="ChartType.Donut" @bind-SelectedIndex="Indx" Height="350px" InputData="@data" InputLabels="@XAxisLabels"></MudChart>
        </MudPaper>
    </MudItem>
      </MudGrid>
</MudPaper>

@code {

    private GateModel[]? ConfirmRollout = new List<GateModel>().ToArray();
    private GateModel[]? ConfirmTrafficIncrease = new List<GateModel>().ToArray();
    private GateModel[]? ConfirmPromotion = new List<GateModel>().ToArray();
    private GateModel[]? Rollback = new List<GateModel>().ToArray();

    public List<ChartSeries> Series = new List<ChartSeries>();
    public ChartOptions chartOptions = new ChartOptions();

    public string[] XAxisLabels = { "ConfirmRollout", "ConfirmTrafficIncrease", "ConfirmPromotion" };
    private int Indx = -1; 
    public double[] data = new double[] { 0, 0, 0 };


    protected override async Task OnInitializedAsync()
    {
        chartOptions.LineStrokeWidth = 10;
        await Refresh();
    }


    async Task Refresh()
    {

        ConfirmRollout = await Http.GetFromJsonAsync<GateModel[]>($"api/gate?webhookState={WebhookStateEnum.ConfirmRollout}");
        ConfirmTrafficIncrease = await Http.GetFromJsonAsync<GateModel[]>($"api/gate?webhookState={WebhookStateEnum.ConfirmTrafficIncrease}");
        ConfirmPromotion = await Http.GetFromJsonAsync<GateModel[]>($"api/gate?webhookState={WebhookStateEnum.ConfirmPromotion}");
        Rollback = await Http.GetFromJsonAsync<GateModel[]>($"api/gate?webhookState={WebhookStateEnum.Rollback}");

        var ConfirmRolloutOpen = ConfirmRollout.Where(g => g.Status == GateStatusEnum.Open.ToString()).Count();
        var ConfirmTrafficIncreaseOpen = ConfirmTrafficIncrease.Where(g => g.Status == GateStatusEnum.Open.ToString()).Count();
        var ConfirmPromotionOpen = ConfirmPromotion.Where(g => g.Status == GateStatusEnum.Open.ToString()).Count();
        var RollbackOpen = ConfirmPromotion.Where(g => g.Status == GateStatusEnum.Open.ToString()).Count();


        var ConfirmRolloutClose = ConfirmRollout.Where(g => g.Status == GateStatusEnum.Close.ToString()).Count();
        var ConfirmTrafficIncreaseClose = ConfirmTrafficIncrease.Where(g => g.Status == GateStatusEnum.Close.ToString()).Count();
        var ConfirmPromotionClose = ConfirmPromotion.Where(g => g.Status == GateStatusEnum.Close.ToString()).Count();
        var RollbackClosed = ConfirmPromotion.Where(g => g.Status == GateStatusEnum.Open.ToString()).Count();

        Series = new List<ChartSeries>() {
            new ChartSeries() { Name = "Open", Data = new double[] { ConfirmRolloutOpen, ConfirmTrafficIncreaseOpen, ConfirmPromotionOpen } },
            new ChartSeries() { Name = "Closed", Data = new double[] { ConfirmRolloutClose,ConfirmTrafficIncreaseClose, ConfirmPromotionClose } }
        };

        data = new double[] { ConfirmRollout.Length, ConfirmPromotion.Length, Rollback.Length };
    }
}

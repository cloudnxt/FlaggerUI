@page "/applications/details/{Id:int}"
@using Gates.Shared
@using Gates.Shared.Data;
@using System.Text.Json;
@inject NavigationManager _navigationManager
@inject HttpClient Http

<PageTitle>Apps</PageTitle>
<div>
    <h3>Apps</h3>
</div>
@if (app == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudPaper>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Deployment Details</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6" Style="padding-left:5px;">
                        <MudText><b> Name: </b>@app.Name</MudText>
                        <MudText><b> Namespace: </b>@app.Namespace</MudText>
                        <MudText><b> ContainerPorts: </b>@app.ContainerPorts</MudText>
                        @*<MudText><b> FlaggerStatus: </b>@app.FlaggerStatus </MudText>*@
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
        @if (canary == null)
        {
            <MudCard>
                <MudText Typo="Typo.caption" Color="Color.Error"> Canary has not been applied </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Generate Canary File</MudButton>
            </MudCard>
        }
        else
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Canary Details</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" Style="padding-left:5px;">
                            <MudText><b> Name: </b>@canary?.interval</MudText>
                            <MudText><b> Iterations: </b>@canary.iterations</MudText>
                            <MudText><b> Threshold: </b>@canary.threshold</MudText>
                            <MudText><b> StepWeight: </b>@canary.stepWeight</MudText>
                            <MudText><b> MaxWeight: </b>@canary.maxWeight</MudText>
                        </MudItem>

                    </MudGrid>

                    <MudText Typo="Typo.h5"> Canary Webhooks </MudText>
                    <MudGrid>

                        @foreach (var item in hooks)
                        {
                            <MudItem xs="12" Style="padding-left:5px;">
                                <MudText><b> Type:  @item.type </b></MudText>
                                <MudText><b> Name: </b>@item.name</MudText>
                                <MudText><b> URL: </b>@item.url</MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        }
    </MudPaper>

}
@code {
    [Parameter]
    public int Id { get; set; }

    private AppDetailModel? app;

    private CanaryModel? canary;

    List<Webhook> hooks = new List<Webhook>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }


    async Task Refresh()
    {
        try
        {
            var response = await Http.GetAsync($"api/app/{Id}");
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
            app = JsonSerializer.Deserialize<AppDetailModel>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine("No App");
        }

        try
        {
            var canaryresponse = await Http.GetAsync($"api/canary/{Id}");
            canaryresponse.EnsureSuccessStatusCode();
            var canary = JsonSerializer.Deserialize<CanaryModel>(await canaryresponse.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (canary != null && canary.Webhooks != null)
            {
                hooks = JsonSerializer.Deserialize<List<Webhook>>(canary?.Webhooks);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("No Canary");
        }
    }

    void Register()
    {
        _navigationManager.NavigateTo("/register/app");
    }
    public class Webhook
    {
        public string? name { get; set; }
        public string? type { get; set; }
        public string? url { get; set; }
    }
}

